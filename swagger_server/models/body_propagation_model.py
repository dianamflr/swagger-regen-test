# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.one_ofbody_propagation_model_parameters import OneOfbodyPropagationModelParameters  # noqa: F401,E501
from swagger_server import util


class BodyPropagationModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model: str=None, parameters: OneOfbodyPropagationModelParameters=None):  # noqa: E501
        """BodyPropagationModel - a model defined in Swagger

        :param model: The model of this BodyPropagationModel.  # noqa: E501
        :type model: str
        :param parameters: The parameters of this BodyPropagationModel.  # noqa: E501
        :type parameters: OneOfbodyPropagationModelParameters
        """
        self.swagger_types = {
            'model': str,
            'parameters': OneOfbodyPropagationModelParameters
        }

        self.attribute_map = {
            'model': 'model',
            'parameters': 'parameters'
        }
        self._model = model
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'BodyPropagationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_propagationModel of this BodyPropagationModel.  # noqa: E501
        :rtype: BodyPropagationModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> str:
        """Gets the model of this BodyPropagationModel.


        :return: The model of this BodyPropagationModel.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this BodyPropagationModel.


        :param model: The model of this BodyPropagationModel.
        :type model: str
        """
        allowed_values = ["fixedRadius", "longleyRice:covlib"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def parameters(self) -> OneOfbodyPropagationModelParameters:
        """Gets the parameters of this BodyPropagationModel.

        Parameters that correspond to the selected algorithm.  # noqa: E501

        :return: The parameters of this BodyPropagationModel.
        :rtype: OneOfbodyPropagationModelParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: OneOfbodyPropagationModelParameters):
        """Sets the parameters of this BodyPropagationModel.

        Parameters that correspond to the selected algorithm.  # noqa: E501

        :param parameters: The parameters of this BodyPropagationModel.
        :type parameters: OneOfbodyPropagationModelParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
