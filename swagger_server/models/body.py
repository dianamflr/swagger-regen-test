# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.body_propagation_model import BodyPropagationModel  # noqa: F401,E501
from swagger_server.models.body_services import BodyServices  # noqa: F401,E501
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, services: List[BodyServices]=None, operators: List[str]=None, services_areas: List[str]=None, aggregation_level: str=None, propagation_model: BodyPropagationModel=None, dataset_date: date=None, result_url: str=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param name: The name of this Body.  # noqa: E501
        :type name: str
        :param services: The services of this Body.  # noqa: E501
        :type services: List[BodyServices]
        :param operators: The operators of this Body.  # noqa: E501
        :type operators: List[str]
        :param services_areas: The services_areas of this Body.  # noqa: E501
        :type services_areas: List[str]
        :param aggregation_level: The aggregation_level of this Body.  # noqa: E501
        :type aggregation_level: str
        :param propagation_model: The propagation_model of this Body.  # noqa: E501
        :type propagation_model: BodyPropagationModel
        :param dataset_date: The dataset_date of this Body.  # noqa: E501
        :type dataset_date: date
        :param result_url: The result_url of this Body.  # noqa: E501
        :type result_url: str
        """
        self.swagger_types = {
            'name': str,
            'services': List[BodyServices],
            'operators': List[str],
            'services_areas': List[str],
            'aggregation_level': str,
            'propagation_model': BodyPropagationModel,
            'dataset_date': date,
            'result_url': str
        }

        self.attribute_map = {
            'name': 'name',
            'services': 'services',
            'operators': 'operators',
            'services_areas': 'servicesAreas',
            'aggregation_level': 'aggregationLevel',
            'propagation_model': 'propagationModel',
            'dataset_date': 'datasetDate',
            'result_url': 'resultUrl'
        }
        self._name = name
        self._services = services
        self._operators = operators
        self._services_areas = services_areas
        self._aggregation_level = aggregation_level
        self._propagation_model = propagation_model
        self._dataset_date = dataset_date
        self._result_url = result_url

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Body.

        Short name or description of the job  # noqa: E501

        :return: The name of this Body.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Body.

        Short name or description of the job  # noqa: E501

        :param name: The name of this Body.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def services(self) -> List[BodyServices]:
        """Gets the services of this Body.


        :return: The services of this Body.
        :rtype: List[BodyServices]
        """
        return self._services

    @services.setter
    def services(self, services: List[BodyServices]):
        """Sets the services of this Body.


        :param services: The services of this Body.
        :type services: List[BodyServices]
        """

        self._services = services

    @property
    def operators(self) -> List[str]:
        """Gets the operators of this Body.


        :return: The operators of this Body.
        :rtype: List[str]
        """
        return self._operators

    @operators.setter
    def operators(self, operators: List[str]):
        """Sets the operators of this Body.


        :param operators: The operators of this Body.
        :type operators: List[str]
        """

        self._operators = operators

    @property
    def services_areas(self) -> List[str]:
        """Gets the services_areas of this Body.


        :return: The services_areas of this Body.
        :rtype: List[str]
        """
        return self._services_areas

    @services_areas.setter
    def services_areas(self, services_areas: List[str]):
        """Sets the services_areas of this Body.


        :param services_areas: The services_areas of this Body.
        :type services_areas: List[str]
        """
        if services_areas is None:
            raise ValueError("Invalid value for `services_areas`, must not be `None`")  # noqa: E501

        self._services_areas = services_areas

    @property
    def aggregation_level(self) -> str:
        """Gets the aggregation_level of this Body.


        :return: The aggregation_level of this Body.
        :rtype: str
        """
        return self._aggregation_level

    @aggregation_level.setter
    def aggregation_level(self, aggregation_level: str):
        """Sets the aggregation_level of this Body.


        :param aggregation_level: The aggregation_level of this Body.
        :type aggregation_level: str
        """
        allowed_values = ["grid", "Tier1", "Tier2", "Tier3", "Tier4", "Tier5"]  # noqa: E501
        if aggregation_level not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_level` ({0}), must be one of {1}"
                .format(aggregation_level, allowed_values)
            )

        self._aggregation_level = aggregation_level

    @property
    def propagation_model(self) -> BodyPropagationModel:
        """Gets the propagation_model of this Body.


        :return: The propagation_model of this Body.
        :rtype: BodyPropagationModel
        """
        return self._propagation_model

    @propagation_model.setter
    def propagation_model(self, propagation_model: BodyPropagationModel):
        """Sets the propagation_model of this Body.


        :param propagation_model: The propagation_model of this Body.
        :type propagation_model: BodyPropagationModel
        """
        if propagation_model is None:
            raise ValueError("Invalid value for `propagation_model`, must not be `None`")  # noqa: E501

        self._propagation_model = propagation_model

    @property
    def dataset_date(self) -> date:
        """Gets the dataset_date of this Body.

        The date to be used to retrieve the datasets used for RSA analysis  # noqa: E501

        :return: The dataset_date of this Body.
        :rtype: date
        """
        return self._dataset_date

    @dataset_date.setter
    def dataset_date(self, dataset_date: date):
        """Sets the dataset_date of this Body.

        The date to be used to retrieve the datasets used for RSA analysis  # noqa: E501

        :param dataset_date: The dataset_date of this Body.
        :type dataset_date: date
        """

        self._dataset_date = dataset_date

    @property
    def result_url(self) -> str:
        """Gets the result_url of this Body.

        Signed S3 URL containing the result of the job - only present if  status is `completed`. The URL will only be valid for 30 minutes  from the time of calling this method. See the parent method for  details on result contents.  # noqa: E501

        :return: The result_url of this Body.
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url: str):
        """Sets the result_url of this Body.

        Signed S3 URL containing the result of the job - only present if  status is `completed`. The URL will only be valid for 30 minutes  from the time of calling this method. See the parent method for  details on result contents.  # noqa: E501

        :param result_url: The result_url of this Body.
        :type result_url: str
        """

        self._result_url = result_url
